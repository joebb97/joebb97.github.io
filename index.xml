<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joseph Buiteweg on Joey Buiteweg</title>
    <link>https://www.josephbuiteweg.com/</link>
    <description>Joey Buiteweg (Joseph Buiteweg)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Nov 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://www.josephbuiteweg.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Curated List of Project Considerations</title>
      <link>https://www.josephbuiteweg.com/blog/project-considerations/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/project-considerations/</guid>
      <description>&lt;h1 id=&#34;project-considerations&#34;&gt;Project considerations&lt;/h1&gt;
&lt;p&gt;Above all else, it has to work.&lt;/p&gt;
&lt;p&gt;System design hints.  Elegant and simple design.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;a href=&#34;https://en.wikipedia.org/wiki/Occam%27s_razor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;
 (&lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;stupid&lt;/a&gt;
), don’t be Richard Hendricks from Silicon Valley. Sometimes the strawman or brute force solution is good enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fail faster, build one design to throw it away, you arent going to get it right the first time. Google spends years getting things wrong too (it took them ~seven years to make &lt;a href=&#34;https://www.youtube.com/watch?v=nvlt0dA7rsQ&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Google Spanner&lt;/a&gt;
).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid the &lt;a href=&#34;https://en.wikipedia.org/wiki/Anti-pattern#Software_engineering&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;anti-patterns&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Narrow the waistband when many components connect to all other components. Create a common ground (e.g LLVM, Kafka, &lt;a href=&#34;https://en.wikipedia.org/wiki/Language_Server_Protocol&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;LSP&lt;/a&gt;
, FIRRTL).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Choose &lt;a href=&#34;http://boringtechnology.club/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;boring technology&lt;/a&gt;
 and choose fewer and simpler technologies with better known failure models&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Research what the right tools (and protocols) are for the job.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Research what&amp;rsquo;s been done and what solutions have been made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Study what has worked and what hasn&amp;rsquo;t worked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DON&amp;rsquo;T REINVENT THE &lt;a href=&#34;https://en.wikipedia.org/wiki/Reinventing_the_wheel#Related_phrases&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;SQUARE WHEEL&lt;/a&gt;
. Avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Not_invented_here&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;NIH&lt;/a&gt;
 syndrome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DON&amp;rsquo;T be an &lt;a href=&#34;https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;architecture astronaut&lt;/a&gt;
, pick the proper technology to solve a problem, don&amp;rsquo;t make up a problem just to use some technology.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code style, quality and readability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write good specifications and documentation (both for internal and external usage).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write good comments that describe WHY, not WHAT, you&amp;rsquo;re doing. Imagine the person knows where you live that has to read it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use style guides and linters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good abstractions and separation of implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maintainability and Serviceability. How easy is it to ship new features? What bogs you down?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scalability.&lt;/p&gt;
&lt;p&gt;Advocate for Devs and Customers, not one or the other. Helping improve one leads to helping the other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explanation in &lt;a href=&#34;https://www.youtube.com/watch?v=i69U0lvi89c&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UI/UX are very important, which i18n is a part of.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o9pEzgHorH0&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Ship features&lt;/a&gt;
, not code.&lt;/p&gt;
&lt;p&gt;Exercise &lt;a href=&#34;https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;good programming taste&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Good, quality automated tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write tests while developing (TDD).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;a href=&#34;https://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;DAMP&lt;/a&gt;
 (descriptive and meaningful phrases).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI/CD.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spend time automating what is worth automating, not something you&amp;rsquo;ll do once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instrumentation, logging, and monitoring are all crucial. Insight into what your system is doing is key. Don’t fly blind.&lt;/p&gt;
&lt;p&gt;Easy, testable, reproducible, quick builds. Quick builds are essential for short iteration cycles.&lt;/p&gt;
&lt;p&gt;Choose &lt;a href=&#34;https://microservices.io/patterns/microservices.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;micro services&lt;/a&gt;
 (&lt;a href=&#34;https://pythonspeed.com/articles/dont-need-kubernetes/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;if you need it&lt;/a&gt;
) and reasonable number of smaller implementations as opposed to one &lt;a href=&#34;https://microservices.io/patterns/monolithic.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;monolith&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Performance.&lt;/p&gt;
&lt;p&gt;Correctness.&lt;/p&gt;
&lt;p&gt;Fault-Tolerance and error handling, do the &lt;a href=&#34;https://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;end-to-end principle&lt;/a&gt;
 where appropriate.&lt;/p&gt;
&lt;p&gt;Software development methods (choose &lt;a href=&#34;https://www.atlassian.com/agile/manifesto&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;agile&lt;/a&gt;
)&lt;/p&gt;
&lt;p&gt;Keeping track of bugs in a database.&lt;/p&gt;
&lt;p&gt;SECURITY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It’s a &lt;a href=&#34;https://www.sentinelone.com/blog/having-trouble-getting-senior-management-to-buy-in-to-your-security-recommendations-try-these-essential-tips/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;mindset&lt;/a&gt;
 not a feature. It’s not a destination that is ever reached unfortunately, it’s a journey that always has to be followed. Adopt the &lt;a href=&#34;https://www.coursera.org/lecture/digital-democracy/the-security-mindset-sLtQu&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;security mindset&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rational paranoia vs analysis paralysis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have to be &lt;a href=&#34;https://www.acm.org/code-of-ethics&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;ethical&lt;/a&gt;
, professional, and excellent.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acknowledge the &lt;a href=&#34;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Dunning-Kruger effect&lt;/a&gt;
 and &lt;a href=&#34;https://en.wikipedia.org/wiki/Four_stages_of_competence&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;four stages of competence&lt;/a&gt;
, &lt;a href=&#34;https://en.wikipedia.org/wiki/Paul_Graham_%28programmer%29#Blub&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Blub programmers&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Database for your equipment.&lt;/p&gt;
&lt;p&gt;Licensing (gpl, mit, bsd, Creative Commons).&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://www.youtube.com/watch?v=30jNsCVLpAE&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Bryan Cantrill&lt;/a&gt;
, we should have a Bias towards observation, not rash actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To debug, ask questions, &lt;strong&gt;then&lt;/strong&gt; form a hypothesis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any of Joel Sposky&amp;rsquo;s &lt;a href=&#34;https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;various&lt;/a&gt;
 &lt;a href=&#34;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;tips&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Consolidated List of Bad Computer Security Things</title>
      <link>https://www.josephbuiteweg.com/blog/security-bad-things-list/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/security-bad-things-list/</guid>
      <description>&lt;p&gt;Things that are bad, dumb, or broken (security checklist), in a few categories.
If you see one of these acronyms or ideas somewhere in your code or product then that&amp;rsquo;s no good.&lt;/p&gt;
&lt;h2 id=&#34;in-cryptography&#34;&gt;In Cryptography&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MD5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SHA1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac then Encrypt (should be Encrypt then Mac), or really should just be GCM / AEAD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AES-*-EBC, AES-*-CBC or anything that isn&amp;rsquo;t GCM or AEAD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Snake oil crypto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Padding oracles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Adaptive_chosen-ciphertext_attack#Practical_attacks&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Bleinchenbacher attack&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reusing symmetric keys (block or stream ciphers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DES, RC4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hashing is not encryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hashing without a shared secret for MAC (length extension attacks)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PGP ecosystem and the web of trust&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Based on &lt;a href=&#34;https://latacora.micro.blog/2019/07/16/the-pgp-problem.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;opinions&lt;/a&gt;
 from
&lt;a href=&#34;https://blog.filippo.io/giving-up-on-long-term-pgp/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;people&lt;/a&gt;
 much &lt;a href=&#34;https://blog.cryptographyengineering.com/2014/08/13/whats-matter-with-pgp/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;smarter&lt;/a&gt;
 than me&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy#Weak_security&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;WEP&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-tls&#34;&gt;In TLS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHE_EXPORT and other export grade crypto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DH-512, RSA-512 or anything lower than 3072 bit asymmetric keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things that aren&amp;rsquo;t ECDHE w/Ed25519&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reusing primes for DH key exchange&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using weak primes for DH key exchange&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NIST CURVES from the NSA or curves that aren&amp;rsquo;t Ed25519&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad entropy sources for generating primes and keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSL (not TLS)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dumb Certificate Authorities (Equifax, Verisign) that get breached&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet replay attacks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-the-web&#34;&gt;In the Web&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plain HTTP (no encryption)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code-injection attacks (SQL injection, XSS, buffer overflows and exploits)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote code execution (RCE) attacks (malformed packets, and co.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session / cookie stealing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSRF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other things on the &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;OWASP Top 10&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plaintext passwords and passwords that aren&amp;rsquo;t hashed using a slow cryptographic hash (bcrypt) &amp;gt; 512 bits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reused passwords&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weak password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default passwords&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-sidechannels&#34;&gt;In sidechannels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;clflush + rdtsc for all privilege levels on x86 and x86-64&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branching on secret and sensitive data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speculating past faults (&lt;a href=&#34;https://meltdownattack.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;meltdown&lt;/a&gt;
)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speculating past bounds and security checks (&lt;a href=&#34;https://meltdownattack.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;spectre&lt;/a&gt;
)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unrestricted access to microarchitecture (cache, TLB, store buffers, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Side channels in general (especially the cache sidechannel)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-general&#34;&gt;In general&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Security by obscurity&amp;rdquo; relying on secrets in your code that people won’t find&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assuming your code is private and storing secrets in your code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IoT security and non-existent cryptography&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blind trust of sensor data without accounting for noise contributed by an attacker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad endpoint and user security practices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code that is susceptible to reverse-engineering, i.e no obfuscation is employed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assuming the user doesn’t want to ruin your life, either intentionally or unintentionally&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-programs-cc-ones-mostly&#34;&gt;In programs (C/C++ ones, mostly)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Buffer overread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Buffer overflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer overflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not sanitizing user inputs and queries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strcpy, sprintf, gets, getpw, scanf and fscanf on strings without length checks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User-inputted format strings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C being dumb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control flow integrity compromises&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to libc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gadgets of all kind&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-contrast-the-things-we-need&#34;&gt;In contrast, the things we need:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Secure keys and key distribution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS, mTLS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certs and automated cert management and renewal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confidentiality, Authenticity, Non-Repudiation, Integrity, and Privacy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Curious Case of Dividing Numbers in Python</title>
      <link>https://www.josephbuiteweg.com/blog/python-divison/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/python-divison/</guid>
      <description>&lt;h2 id=&#34;positive-numbers&#34;&gt;Positive Numbers&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re in the market for converting form python2 to python3, be aware that there&amp;rsquo;s some fundamental differences in default division of integers. Also beware that these differences won&amp;rsquo;t be automagically resolved by the tool &lt;a href=&#34;https://docs.python.org/3/library/2to3.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;2to3&lt;/a&gt;
.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#bd93f9&#34;&gt;1.6666666666666667&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the &lt;code&gt;/&lt;/code&gt; operator in python3 leads to floating point divison by default, which can lead to problems if you&amp;rsquo;re doing something like calculating memory page indices!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;index &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;PAGE_SIZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access the integer division behavior in python3, you&amp;rsquo;ll need to use the &lt;code&gt;//&lt;/code&gt; operator. The code above becomes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;index &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;PAGE_SIZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;negative-numbers&#34;&gt;Negative Numbers&lt;/h2&gt;
&lt;p&gt;Things get even more interesting when dealing with negative numbers and rounding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1.6666666666666667&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From what I can tell, both python2 and python3 round towards negative infinity when doing integer division (&lt;code&gt;/&lt;/code&gt; in python2 with integer divider and dividend, &lt;code&gt;//&lt;/code&gt; in python3 with integer divider and dividend). They also do the same thing when converting a negative floating point number to an integer, which is to round towards zero.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;compared-to-c&#34;&gt;Compared to C++&lt;/h2&gt;
&lt;p&gt;Integer division truncation with negative numbers is different in C++, unfortunately.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// a.cpp
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;(){
    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;endl;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ g++ a.cpp ; ./a.out
-1
-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thankfully the behavior for converting a negative floating point number to an &lt;code&gt;int&lt;/code&gt; has the same behavior between the three languages (as shown by the output of &lt;code&gt;int(5.0 / -3)&lt;/code&gt; in C++).&lt;/p&gt;
&lt;p&gt;Subtle differences in basic behavior of programming languages are always a joy to stumble across at the most inopportune times.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://www.josephbuiteweg.com/extra/faq/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/extra/faq/</guid>
      <description>&lt;h2 id=&#34;why-is-your-website-pink&#34;&gt;Why is your website pink?&lt;/h2&gt;
&lt;p&gt;My website is pink because I enjoy pink and pastel colors. I appreciate their friendly and comforting qualities, both of which I try my best to bring to my interactions with others.&lt;/p&gt;
&lt;h2 id=&#34;thoughts-on-workplace-discrimination-of-all-shapes-and-sizes&#34;&gt;Thoughts on workplace discrimination of all shapes and sizes?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s avoid that in any way possible.&lt;/p&gt;
&lt;p&gt;Technology should try to be everything-neutral and provide net good to real people.&lt;/p&gt;
&lt;h2 id=&#34;how-about-those-same-forms-of-discrimination-in-higher-education&#34;&gt;How about those same forms of discrimination in higher-education?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s also avoid that in any way possible.&lt;/p&gt;
&lt;h2 id=&#34;why-do-you-have-a-website--blog&#34;&gt;Why do you have a website / blog?&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve gotten tons of help and useful info from other peoples&amp;rsquo; programming blogs and articles, and I want to give back in a similar way. I also love teaching and helping others, so I view this site as the perfect outlet for that.&lt;/p&gt;
&lt;p&gt;I was not born knowing what I know - other people have helped me get to where I am. It&amp;rsquo;s important us engineers acknowledge our struggles, as it helps comfort those who face the same difficulty in learning the skills needed in our respective fields. I&amp;rsquo;m hoping that documenting my struggles with new things I learn will help on this front.&lt;/p&gt;
&lt;p&gt;Most people in tech have been saved by reading somebody else&amp;rsquo;s encounter with the esoteric and pain-staking problem they&amp;rsquo;re tackling. StackOverflow, various StackExchange sites, people&amp;rsquo;s blogs, spec-sheets, and user documentation are all crucial to the landscape of learning software. My dream is for someone to randomly stumble across one of my posts via search engine, get some use out of it, and then go about their day one step closer to solving their problem.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png&#34; alt=&#34;xkcd&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;CC BY-NC 2.5&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;these-are-all-just-your-opinions-right&#34;&gt;These are all just your opinions, right?&lt;/h2&gt;
&lt;p&gt;Yes everything on this site is my own personal opinion and doesn&amp;rsquo;t necessarily reflect that of whoever employs me at any given time. Some might even call what I write here &lt;strong&gt;jokes&lt;/strong&gt; and &lt;strong&gt;satire&lt;/strong&gt;, but sadly words will only get us so far.&lt;/p&gt;
&lt;p&gt;Much of programming and tech is quite subjective with only some absolutes. The above disclaimer is quite important.&lt;/p&gt;
&lt;p&gt;If you disagree with the content you see here, don&amp;rsquo;t hesitate to reach out. I love discussing most all topics related to tech, even the most subjective ones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Even More About Me</title>
      <link>https://www.josephbuiteweg.com/about/</link>
      <pubDate>Mon, 15 Jun 2020 18:37:51 -0400</pubDate>
      
      <guid>https://www.josephbuiteweg.com/about/</guid>
      <description>&lt;h1 id=&#34;my-personal-blessings&#34;&gt;My Personal Blessings&lt;/h1&gt;
&lt;p&gt;First, I&amp;rsquo;d like to acknowledge that as a cis-gendered, straight, white man, I am incredibly blessed and privileged to have lived the life I have.&lt;/p&gt;
&lt;p&gt;I am fortunate to have grown up in Ann Arbor, MI and attended public schools that are well funded and have a decently diverse student body.&lt;/p&gt;
&lt;p&gt;I attribute any success I have to that fact that I had a stable upbringing, two wonderful and successful parents who I look up to as role-models,
and a strong network of people supporting me along my journey in life.&lt;/p&gt;
&lt;p&gt;It makes very happy to see the progress that society is making towards both equality and equity.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Butler Lampson&#39;s System Design Hints</title>
      <link>https://www.josephbuiteweg.com/blog/design-hints/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/design-hints/</guid>
      <description>&lt;p&gt;A summary of &lt;a href=&#34;https://en.wikipedia.org/wiki/Butler_Lampson&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Butler Lampson&lt;/a&gt;
&amp;rsquo;s original &lt;a href=&#34;https://bwlampson.site/33-Hints/Acrobat.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;
&lt;/p&gt;
&lt;h1 id=&#34;2-functionality&#34;&gt;2 Functionality&lt;/h1&gt;
&lt;h2 id=&#34;21-keep-it-simple&#34;&gt;2.1: Keep it simple&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do one thing at a time, do it well. Make small, working, effective interfaces, they are contracts, don&amp;rsquo;t try to do too much, don’t generalize.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get it right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write specifications (then implement), document the abstract functionality provided by your application and its interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-corollaries&#34;&gt;2.2: Corollaries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make it fast rather than general or powerful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t hide the power of the interface, clients should know what it does well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes provide flexibility (allow the client to provide what they want to make it both general and powerful).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave it to the client as long as it is cheap to pass control back and forth.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-continuity&#34;&gt;2.3: Continuity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep basic interfaces stable, they are contracts. Legacy is sometimes unavoidable, but you can spoof it when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have to change interfaces, keep a place to stand, make sure stuff built on your old interface can still benefit from the new changes or even just work at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes need to put old interface on top of a new system (easier than rewriting the whole thing, this is where VMs come in handy).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24-making-implementations-work&#34;&gt;2.4: Making implementations work&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plan to throw one away. Fail faster, you’re almost never going to get it right the first time (doesn’t mean you shouldn’t try).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep secrets of the implementation (but don’t hide power), don’t allow clients to assume things they shouldn’t. The fewer assumptions the better when needing to port things, hard to design/re-design interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes can benefit from adding more assumptions, but a balance is needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Divide and conquer functionality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce a hard problem into several smaller ones.&lt;/li&gt;
&lt;li&gt;Solve those smaller problems with effective interfaces and abstractions.&lt;/li&gt;
&lt;li&gt;Divide resources or limit them depending on what gives better output.&lt;/li&gt;
&lt;li&gt;Defer and avoid work or just substitute work for other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a good idea again instead of generalizing. Sometimes the specific implementation is better than trying to make that implementation work everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-handling-all-the-cases&#34;&gt;2.5: Handling all the cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Handle the normal and worst cases separately, the requirements are very different.
&lt;ul&gt;
&lt;li&gt;Optimizing the tail is different from optimizing normal execution.&lt;/li&gt;
&lt;li&gt;The normal case must be fast, the worst case must make some progress.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-speed&#34;&gt;3 Speed&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Split resources in a fixed way if in doubt, rather than sharing them. Allocator can be predictable, use registers instead of memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use static analysis if you can, don’t delude with bad one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic translation (Do expensive translation to faster context once, benefit overall).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache answers to expensive computations rather than doing them over. Don’t want to thrash though, need to be able to fit all active values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use hints to speed up normal execution. Hints can be wrong and might not result from an associated lookup. Need to be able to check its correctness. Check it against truth, supposed to make things run fast (must be correct nearly all the time). Routing sometimes uses this (BGP does)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When in doubt, use brute force, straightforward easily analyzed solution w/ special purpose computing is better than complex, poorly characterized one that only works well if some assumptions are satisfied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asymptotically faster algorithm is not necessarily better. Sometimes the dumb brute force thing just works better and is easier to deal with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute in the background when possible (defer work or do it when nobody is looking). Use the time allotted to you (consolidate things overnight).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use batch processing. Do jobs in groups, normally the cost of starting each job individually plus doing the job outweighs the cost of doing them all at once. (Bank does all their computation jobs at once overnight).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Safety first, avoid disaster when allocating resources, don’t try to always be optimal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overloading a system can drastically degrade its service. Leave head room for things if you can, don’t cause thrashing.&lt;/li&gt;
&lt;li&gt;Cleverness only really works if you know the load. CPU scheduling example, be lazy and safe some times&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shed load to control demand, rather than allowing the system to become overloaded.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Like how mac’s intentionally run a process that does empty CPU operations to cool it down.&lt;/li&gt;
&lt;li&gt;Drop packets as a router if it’s flooded, memory manager limits jobs.&lt;/li&gt;
&lt;li&gt;Worst case the system crashes and can start over with less load.&lt;/li&gt;
&lt;li&gt;Arpanet tried to always deliver a packet, but this lead to deadlocks a lot if a link goes down.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-fault-tolerance&#34;&gt;4 Fault-tolerance&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;End-to-end, Error recovery at application level is required for reliable system. HANDLE YOUR EXCEPTIONS CORRECTLY! Idempotency matters here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check the end-to-end errors, add intermediate checks if errors are super frequent.&lt;/li&gt;
&lt;li&gt;Routers again drop packets if something went wrong or notify the sender.&lt;/li&gt;
&lt;li&gt;Need cheap test for success, also might not see issues until heavy load&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log updates to record the truth about the state of an object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log based file system is an example. Similar to record and replay debugging.&lt;/li&gt;
&lt;li&gt;HAS TO BE IDEMPOTENT THOUGH in case you end up applying the same operation twice.&lt;/li&gt;
&lt;li&gt;Store versions of an object and make those versions immutable (like in Clojure and other functional programming languages).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make actions atomic or restartable (transactions that complete or do nothing).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commit records in databases, an operation should either happen in its entirety or not at all.&lt;/li&gt;
&lt;li&gt;Again need a restartable operation (idempotent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replicate state across nodes (distributed systems).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Auto Otamatone</title>
      <link>https://www.josephbuiteweg.com/projects/otamatone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/projects/otamatone/</guid>
      <description>&lt;h2 id=&#34;the-finished-project&#34;&gt;The Finished Project&lt;/h2&gt;
&lt;div 
    
    style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;
    
    &gt;
    &lt;iframe
             
        src=&#34;https://www.youtube-nocookie.com/embed/videoseries?list=PL3mMMVIGL8i31Vo1rcE0b6XtApaTJtRdq&amp;index=0&#34; 
            
            
            style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34;
            
            allowfullscreen=&#34;true&#34;
            title=&#34;YouTube Video&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quick-bullets&#34;&gt;Quick Bullets&lt;/h2&gt;
&lt;p&gt;In this project my teammates and I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conceptualized a project for automated playing of the toy fretless instrument called the Otamatone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developed a Stepper Motor and Servo driver on an FPGA using Verilog to move the playhead when keyboard keys were pressed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interfaced C firmware with drivers using Memory Mapped I/O to rotate the motor and activate the servo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborated closely with two teammates to establish requirements for the chassis and other hardware and to keep the project on schedule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Designed circuitry to analyze the electrical signal frequency of the Otamatone using Op-Amps, which helped enable self-tuning functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Created a novel P-controller to automatically tune the instrument using GPIO interrupt handlers written in C.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrote additional interrupt handlers in C to process UART signals from a Raspberry PI connected to a USB MIDI keyboard.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-construction-videos&#34;&gt;Under Construction Videos&lt;/h2&gt;
&lt;div 
    
    style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;
    
    &gt;
    &lt;iframe
             
        src=&#34;https://www.youtube-nocookie.com/embed/videoseries?list=PL3mMMVIGL8i31Vo1rcE0b6XtApaTJtRdq&amp;index=1&#34; 
            
            
            style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34;
            
            allowfullscreen=&#34;true&#34;
            title=&#34;YouTube Video&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;project-poster&#34;&gt;Project Poster&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/373poster.jpg&#34; alt=&#34;The poster&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;hardware-utilized&#34;&gt;Hardware Utilized&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsemi.com/product-directory/soc-fpgas/1693-smartfusion&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Microsemi&amp;#39;s SmartFusion SoC&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ti.com/lit/ds/symlink/sn754410.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;SN754410 H-Bridge&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Raspberry Pi 3&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/lm2903b.pdf?ts=1606512923694&amp;amp;ref_url=https%253A%252F%252Fwww.ti.com%252Famplifier-circuit%252Fcomparators%252Fproducts.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;voltage comparator&lt;/a&gt;
 from Texas Instruments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://servodatabase.com/servo/hitec/hs-422&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Hitech HS-422 Servo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pololu.com/product/1476&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Nema 23 Hybrid Stepper Motor&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://otamatone.com/352/otamatone-deluxe/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Otamatone Deluxe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.akaipro.com/mpk-mini-mkii&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Akai MPK Mini&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reflections&#34;&gt;Reflections&lt;/h2&gt;
&lt;p&gt;This project could&amp;rsquo;ve been improved in a couple of ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A majority of our time for the project was spent getting the stepper motor working by flipping inputs to an H-bridge from an FPGA, which ended up being ~300 lines of Verilog. If you&amp;rsquo;ve written HDL before, you know that it takes forever to debug. We thought it would be crucial to implement this driver in hardware since we wanted the playhead to move as fast as possible. Whether this mattered or not I don&amp;rsquo;t know, but we could&amp;rsquo;ve saved a bunch of time using a premade stepper motor driver such as the &lt;a href=&#34;http://www.geeetech.com/Documents/A4988-Datasheet.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;A4988&lt;/a&gt;
 (a slew of other drivers can be found in this &lt;a href=&#34;https://medium.com/jungletronics/quick-intro-to-motor-drivers-322e4929db44&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt;
).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should&amp;rsquo;ve used a &lt;a href=&#34;https://en.wikipedia.org/wiki/Rotary_encoder&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;motor encoder&lt;/a&gt;
 to monitor how much the playhead &lt;strong&gt;actually&lt;/strong&gt; moved along the track. We simply assumed that whenever we told the stepper to take 1 step, that it actually took that step, which doesn&amp;rsquo;t always happen in reality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The motor would somtimes get snagged on the track and take less than a full step (especially when making small adjustments for self-tuning), which would then cause the state of our software to drift out of sync with where the playhead actually was.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was especially problematic because the self-tuning mechanism updated the internal step count of our firmware. Because of this, we had to restart the whole system a few times on demo-day, which was quite unfortunate. This behavior can be seen in the fourth video from the playlist linked above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to a motor encoder, a full on &lt;a href=&#34;https://en.wikipedia.org/wiki/PID_controller&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;PID controller&lt;/a&gt;
 would&amp;rsquo;ve yielded much better results when self-tuning. Our only insight into the performance of the system was the frequency that the Otamatone was playing compared with the correct frequency of the key pressed on the MIDI keyboard. This difference in frequency is the perfect input for a PID controller, with the position of the playhead being the output. Unfortunately, we just didn&amp;rsquo;t have the time to implement one in software like we did with the P-controller. Adding the actual state of the motor to our feedback loop using an encoder also would&amp;rsquo;ve helped immensely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I don&amp;rsquo;t remember whether we used the Nema 23 in unipolar or bipolar mode, but bipolar stepper motors provide more torque than their unipolar counterpart, which could&amp;rsquo;ve let us eke out some more RPMs from the motor. The downside to bipolar mode is that is harder to operate, which isn&amp;rsquo;t ideal for a project with a short timeline like ours.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Apologies for the console errors on this page and other pages with embedded youtube videos, it seems youtube needs to fix their CORS policies and disable doubleclick ads when embedding youtube-nocookie.com links)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact Joey</title>
      <link>https://www.josephbuiteweg.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/contact/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re a peer, student, or fellow engineer here to &lt;strong&gt;compare&lt;/strong&gt; yourself to me by looking at my resume,
I&amp;rsquo;d encourage you to read &lt;a href=&#34;https://www.josephbuiteweg.com/extra/can-you-not/&#34;&gt;this&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Otherwise, if you&amp;rsquo;re here as part of the hiring process, you probably already have my resume and phone number in some shape or form.&lt;/p&gt;
&lt;p&gt;Email: joebb &amp;lt;at&amp;gt; umich &amp;lt;dot&amp;gt; edu&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/joebb97&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;GitHub Profile&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.eecs.umich.edu/joebb&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;GitLab Profile&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Review</title>
      <link>https://www.josephbuiteweg.com/extra/key-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/extra/key-review/</guid>
      <description>&lt;p&gt;Following is a review of my favorite mechanical keyboard.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Gear</title>
      <link>https://www.josephbuiteweg.com/music/things/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/music/things/</guid>
      <description>&lt;h1 id=&#34;audio-interface&#34;&gt;Audio Interface&lt;/h1&gt;
&lt;p&gt;Scarlett 2i4&lt;/p&gt;
&lt;h1 id=&#34;monitors&#34;&gt;Monitors&lt;/h1&gt;
&lt;p&gt;Rokit KRK 4&lt;/p&gt;
&lt;h1 id=&#34;daw&#34;&gt;DAW&lt;/h1&gt;
&lt;p&gt;Ableton&lt;/p&gt;
&lt;h1 id=&#34;microphone&#34;&gt;Microphone&lt;/h1&gt;
&lt;p&gt;Shure SM58&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Smart Rooms</title>
      <link>https://www.josephbuiteweg.com/projects/smartrooms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/projects/smartrooms/</guid>
      <description>&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;
&lt;p&gt;In this demo, I have the room&amp;rsquo;s light set to be red. This is why the light changes when I enter the room.&lt;/p&gt;
&lt;p&gt;My project partner Sharang has it set to be orange, and since he has higher priority than me, the light changes to orange.&lt;/p&gt;
&lt;p&gt;After Sharang leaves, however, they change back to red.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube-nocookie.com/embed/bgIFu333o0k&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quick-bullets&#34;&gt;Quick Bullets&lt;/h2&gt;
&lt;p&gt;In this project my teammates and I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conceptualized a project to apply a user&amp;rsquo;s settings for a specific rooms in their home automatically when the user&amp;rsquo;s presence in a room is detected. User settings included the music playing in a room and the brightness and color of the room&amp;rsquo;s lights.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrote and debugged firmware for the ESP32 SoC to gather Bluetooth Low Energy RSSI measurements, detect the presence of users carrying an Eddystone beacon, and to communicate with user peripherals like smart lightbulbs and speakers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architected a web application for users to edit their settings, establish user priority, register devices and rooms, and communicate with measurement devices to update room settings using Flask, Python, Heroku, Jinja templates, and Postgres.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coordinated with teammates to enable successful communication between measurement devices, room peripherals, and the web application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborated with other teammates confirm the requirements for our PCB and keep the project on schedule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enforced access restrictions between user accounts to ensure safety, security, and integrity of sensitive user data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;project-poster&#34;&gt;Project Poster&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473poster.jpg&#34; alt=&#34;The poster&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;web-ui-screenshot&#34;&gt;Web UI Screenshot&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473web-ui.png&#34; alt=&#34;The UI&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;system-architecture-flowchart&#34;&gt;System Architecture Flowchart&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473flowchart.png&#34; alt=&#34;The flowchart&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;database-schema&#34;&gt;Database Schema&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473db.png&#34; alt=&#34;the schema&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;hardware-utilized&#34;&gt;Hardware Utilized&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 running as an ethernet bridge and music speaker.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lifx.com/pages/lightbulbs&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;LIFX Smart Lightbulb&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32/overview&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;ESP32 Wireless Soc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.radiusnetworks.com/collections/hardware/products/radbeacon-01-dot&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Radbeacon Eddystone Beacon&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B001FWYGJS/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;TP-Link N300 Router&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reflections&#34;&gt;Reflections&lt;/h2&gt;
&lt;p&gt;This project could&amp;rsquo;ve been improved in a couple of ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It was &lt;strong&gt;incredibly&lt;/strong&gt; insecure and very much a &lt;strong&gt;privacy hazard&lt;/strong&gt;. The webserver was never configured to use HTTPS, meaning an attacker could freely spy on a user&amp;rsquo;s network to see which rooms they&amp;rsquo;re in, modify their devices, etc. We literally sent unencrypted measurements of bluetooth RSSI from the ESP32 out through the internet to our webserver.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Despite this, if our novel prototype were a real product I&amp;rsquo;m sure someone would&amp;rsquo;ve bought or funded it though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🤔🤔🤔&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The peripheral control and measurement devices connected to a user&amp;rsquo;s home network using WPS, which is &lt;a href=&#34;https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup#Vulnerabilities&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;not secure&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No cryptography was used to verify that updates to a room&amp;rsquo;s settings came from the Smart Rooms webserver. This means anyone who intercepted and sent the right HTTP replies to the right places could definitely change a user&amp;rsquo;s settings without them asking, even with a home network&amp;rsquo;s NAT firewall enabled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The settings stored on the webserver weren&amp;rsquo;t at risk here, but anyone could reply to the peripheral controlling devices that were polling for the room&amp;rsquo;s settings with made up answers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measurements from the ESP32 could be spoofed by anybody, anywhere, since they weren&amp;rsquo;t authenticated. The ESP32 was simply identified by User-Agent, which anybody can lie about. This also means other users could lie about their ESP32&amp;rsquo;s provided ID to read (but not modify) the settings of other users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to almost nonexistent network security, we didn&amp;rsquo;t really exercise any defensive programming practices for our C firmware running FreeRTOS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our code had plenty of calls to &lt;code&gt;strcpy&lt;/code&gt;, &lt;code&gt;sscanf&lt;/code&gt;, &lt;code&gt;sprintf&lt;/code&gt;, all of which are vulnerable to buffer overflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, security wasn&amp;rsquo;t considered for the project since it was simply a prototype and our biggest priority was just to get something working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On the server side, we handled a fair amount of timestamped RSSI measurements. These measurements are really time-series data, which are well suited to be stored in a time-series database like &lt;a href=&#34;https://www.influxdata.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;InfluxDB&lt;/a&gt;
. This is especially useful when deciding whether measurements indicate a user is in a room. This decision process could consider the average of the last N measurements from a device or use other algorithms. Regardless of the decision algorithm, a time-series database can greatly facilitiate querying timestamped data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We used a relational database for our application, which was the right choice for the rest of our data since it had lots of structure. Homes have rooms, rooms have devices, so on and so on. But the RSSI measurements probably could&amp;rsquo;ve been shoved into InfluxDB. The tradeoff here is added complexity and maintenance though, since two databases is more than one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Us being Computer Engineering and Electrical Engineering students, I think it&amp;rsquo;s reasonable that none of us had ever heard of a time-series database when doing our project (the CS curriculum never talks about them either as far as I know). Knowing this family of databases exists will definitely be helpful in future IoT projects though.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>STOP</title>
      <link>https://www.josephbuiteweg.com/extra/can-you-not/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/extra/can-you-not/</guid>
      <description>&lt;p&gt;CAN YOU MAYBE NOT ??????&lt;/p&gt;
&lt;p&gt;You and I both know this isn&amp;rsquo;t healthy for either of us, so let&amp;rsquo;s not.&lt;/p&gt;
&lt;p&gt;Competition is fierce enough as it is in higher-education and the engineering world, so let&amp;rsquo;s not subject ourselves with nuance comparisons of resumes or LinkedINs, please and thank you.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>