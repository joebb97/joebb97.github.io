<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Joey Buiteweg</title>
    <link>https://www.josephbuiteweg.com/projects/</link>
    <description>Joey Buiteweg (Projects)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jan 2021 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://www.josephbuiteweg.com/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elm Sudoku Solver</title>
      <link>https://www.josephbuiteweg.com/projects/elm-sudoku/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/projects/elm-sudoku/</guid>
      <description>&lt;h2 id=&#34;the-finished-project&#34;&gt;The Finished Project&lt;/h2&gt;
&lt;p&gt;It lives &lt;a href=&#34;https://elm-sudoku.netlify.app&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;here on netlify&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The source code lives &lt;a href=&#34;https://github.com/joebb97/sandbox/tree/master/elm/sudoku&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;here on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;supported-functionality&#34;&gt;Supported Functionality&lt;/h2&gt;
&lt;p&gt;This app can solve user specified &lt;a href=&#34;https://en.wikipedia.org/wiki/Sudoku&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Sudoku&lt;/a&gt;
 boards, as well as generate boards for users to test their abilities on.&lt;/p&gt;
&lt;p&gt;Both user specified and generated boards can be solved by simply clicking the &amp;ldquo;solve&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;The solver can solve the &amp;ldquo;world&amp;rsquo;s hardest wikipedia board&amp;rdquo; (shown below) in roughly a second or so. Feel free to try it out!
&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/sudoku.jpg&#34; alt=&#34;board&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The &amp;ldquo;wikipedia board&amp;rdquo; button generates the same board from the Wikipedia article on Sudoku, which can also be solved by the user or the solver. It was used for testing purposes.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;quick-bullets&#34;&gt;Quick Bullets&lt;/h2&gt;
&lt;p&gt;In this project I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned a new frontend, functional programming language, &lt;a href=&#34;https://elm-lang.org/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;elm&lt;/a&gt;
, and applied what I learned to a sample problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Designed the HTML, CSS, and algorithms for a Sudoku player and solver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Created an efficient solution to the Sudoku Constraint Satisfaction Problem (CSP) using a backtracking algorithm with the Minimum Remaining Value (MRV) heuristic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constructed data model and transformation logic for handling updates to the Sudoku board.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enforced Sudoku rules when receiving input from a player so that the game functions correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leveraged help from the &lt;a href=&#34;https://faq.elm-community.org/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Elm community&lt;/a&gt;
, mainly the Slack workspace, to get past roadblocks faced during the project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;my-goals&#34;&gt;My Goals&lt;/h2&gt;
&lt;p&gt;My goals in this project were to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learn a functional language to make adopting the paradigm easier in future projects and in my work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increase my ability to contribute correct, efficient, code to the frontends of projects, and further myself as an all-stack developer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I love most every aspect of computing, from logic gates to firmware and operating systems all the way up to web systems!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a simple, efficient, and useful web application for real people.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;d say I accomplished these goals in this project.&lt;/p&gt;
&lt;h2 id=&#34;reflections&#34;&gt;Reflections&lt;/h2&gt;
&lt;p&gt;It might be nice to support a &amp;ldquo;clear&amp;rdquo; button that keeps the same generated board, in case the user wants to start over. I&amp;rsquo;ll add this functionality if enough people request it.&lt;/p&gt;
&lt;p&gt;It might also be nice to support importing and exporting boards, but since I&amp;rsquo;m unaware of a universal format for storing sudoku boards I don&amp;rsquo;t see much utility to this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auto Otamatone</title>
      <link>https://www.josephbuiteweg.com/projects/otamatone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/projects/otamatone/</guid>
      <description>&lt;h2 id=&#34;the-finished-project&#34;&gt;The Finished Project&lt;/h2&gt;
&lt;div 
    
    style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;
    
    &gt;
    &lt;iframe
             
        src=&#34;https://www.youtube-nocookie.com/embed/videoseries?list=PL3mMMVIGL8i31Vo1rcE0b6XtApaTJtRdq&amp;index=0&#34; 
            
            
            style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34;
            
            allowfullscreen=&#34;true&#34;
            title=&#34;YouTube Video&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quick-bullets&#34;&gt;Quick Bullets&lt;/h2&gt;
&lt;p&gt;In this project my teammates and I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conceptualized a project for automated playing of the toy fretless instrument called the Otamatone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developed a Stepper Motor and Servo driver on an FPGA using Verilog to move the playhead when keyboard keys were pressed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interfaced C firmware with drivers using Memory Mapped I/O to rotate the motor and activate the servo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborated closely with two teammates to establish requirements for the chassis and other hardware and to keep the project on schedule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Designed circuitry to analyze the electrical signal frequency of the Otamatone using Op-Amps, which helped enable self-tuning functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Created a novel P-controller to automatically tune the instrument using GPIO interrupt handlers written in C.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrote additional interrupt handlers in C to process UART signals from a Raspberry PI connected to a USB MIDI keyboard.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-construction-videos&#34;&gt;Under Construction Videos&lt;/h2&gt;
&lt;div 
    
    style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;
    
    &gt;
    &lt;iframe
             
        src=&#34;https://www.youtube-nocookie.com/embed/videoseries?list=PL3mMMVIGL8i31Vo1rcE0b6XtApaTJtRdq&amp;index=1&#34; 
            
            
            style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34;
            
            allowfullscreen=&#34;true&#34;
            title=&#34;YouTube Video&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;project-poster&#34;&gt;Project Poster&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/373poster.jpg&#34; alt=&#34;The poster&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;hardware-utilized&#34;&gt;Hardware Utilized&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsemi.com/product-directory/soc-fpgas/1693-smartfusion&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Microsemi&amp;#39;s SmartFusion SoC&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ti.com/lit/ds/symlink/sn754410.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;SN754410 H-Bridge&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Raspberry Pi 3&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/lm2903b.pdf?ts=1606512923694&amp;amp;ref_url=https%253A%252F%252Fwww.ti.com%252Famplifier-circuit%252Fcomparators%252Fproducts.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;voltage comparator&lt;/a&gt;
 from Texas Instruments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://servodatabase.com/servo/hitec/hs-422&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Hitech HS-422 Servo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pololu.com/product/1476&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Nema 23 Hybrid Stepper Motor&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://otamatone.com/352/otamatone-deluxe/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Otamatone Deluxe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.akaipro.com/mpk-mini-mkii&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Akai MPK Mini&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reflections&#34;&gt;Reflections&lt;/h2&gt;
&lt;p&gt;This project could&amp;rsquo;ve been improved in a couple of ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A majority of our time for the project was spent getting the stepper motor working by flipping inputs to an H-bridge from an FPGA, which ended up being ~300 lines of Verilog. If you&amp;rsquo;ve written HDL before, you know that it takes forever to debug. We thought it would be crucial to implement this driver in hardware since we wanted the playhead to move as fast as possible. Whether this mattered or not I don&amp;rsquo;t know, but we could&amp;rsquo;ve saved a bunch of time using a premade stepper motor driver such as the &lt;a href=&#34;http://www.geeetech.com/Documents/A4988-Datasheet.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;A4988&lt;/a&gt;
 (a slew of other drivers can be found in this &lt;a href=&#34;https://medium.com/jungletronics/quick-intro-to-motor-drivers-322e4929db44&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt;
).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should&amp;rsquo;ve used a &lt;a href=&#34;https://en.wikipedia.org/wiki/Rotary_encoder&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;motor encoder&lt;/a&gt;
 to monitor how much the playhead &lt;strong&gt;actually&lt;/strong&gt; moved along the track. We simply assumed that whenever we told the stepper to take 1 step, that it actually took that step, which doesn&amp;rsquo;t always happen in reality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The motor would somtimes get snagged on the track and take less than a full step (especially when making small adjustments for self-tuning), which would then cause the state of our software to drift out of sync with where the playhead actually was.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was especially problematic because the self-tuning mechanism updated the internal step count of our firmware. Because of this, we had to restart the whole system a few times on demo-day, which was quite unfortunate. This behavior can be seen in the fourth video from the playlist linked above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to a motor encoder, a full on &lt;a href=&#34;https://en.wikipedia.org/wiki/PID_controller&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;PID controller&lt;/a&gt;
 would&amp;rsquo;ve yielded much better results when self-tuning. Our only insight into the performance of the system was the frequency that the Otamatone was playing compared with the correct frequency of the key pressed on the MIDI keyboard. This difference in frequency is the perfect input for a PID controller, with the position of the playhead being the output. Unfortunately, we just didn&amp;rsquo;t have the time to implement one in software like we did with the P-controller. Adding the actual state of the motor to our feedback loop using an encoder also would&amp;rsquo;ve helped immensely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I don&amp;rsquo;t remember whether we used the Nema 23 in unipolar or bipolar mode, but bipolar stepper motors provide more torque than their unipolar counterpart, which could&amp;rsquo;ve let us eke out some more RPMs from the motor. The downside to bipolar mode is that is harder to operate, which isn&amp;rsquo;t ideal for a project with a short timeline like ours.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Apologies for the console errors on this page and other pages with embedded youtube videos, it seems youtube needs to fix their CORS policies and disable doubleclick ads when embedding youtube-nocookie.com links)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Smart Rooms</title>
      <link>https://www.josephbuiteweg.com/projects/smartrooms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/projects/smartrooms/</guid>
      <description>&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;
&lt;p&gt;In this demo, I have the room&amp;rsquo;s light set to be red. This is why the light changes when I enter the room.&lt;/p&gt;
&lt;p&gt;My project partner Sharang has it set to be orange, and since he has higher priority than me, the light changes to orange.&lt;/p&gt;
&lt;p&gt;After Sharang leaves, however, they change back to red.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube-nocookie.com/embed/bgIFu333o0k&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quick-bullets&#34;&gt;Quick Bullets&lt;/h2&gt;
&lt;p&gt;In this project my teammates and I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conceptualized a project to apply a user&amp;rsquo;s settings for a specific rooms in their home automatically when the user&amp;rsquo;s presence in a room is detected. User settings included the music playing in a room and the brightness and color of the room&amp;rsquo;s lights.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrote and debugged firmware for the ESP32 SoC to gather Bluetooth Low Energy RSSI measurements, detect the presence of users carrying an Eddystone beacon, and to communicate with user peripherals like smart lightbulbs and speakers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architected a web application for users to edit their settings, establish user priority, register devices and rooms, and communicate with measurement devices to update room settings using Flask, Python, Heroku, Jinja templates, and Postgres.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coordinated with teammates to enable successful communication between measurement devices, room peripherals, and the web application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborated with other teammates confirm the requirements for our PCB and keep the project on schedule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enforced access restrictions between user accounts to ensure safety, security, and integrity of sensitive user data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;project-poster&#34;&gt;Project Poster&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473poster.jpg&#34; alt=&#34;The poster&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;web-ui-screenshot&#34;&gt;Web UI Screenshot&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473web-ui.png&#34; alt=&#34;The UI&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;system-architecture-flowchart&#34;&gt;System Architecture Flowchart&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473flowchart.png&#34; alt=&#34;The flowchart&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;database-schema&#34;&gt;Database Schema&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;md-image text-center&#34;&gt;
    &lt;img src=&#34;https://www.josephbuiteweg.com/473db.png&#34; alt=&#34;the schema&#34; class=&#34;figure-img img-fluid&#34;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;hardware-utilized&#34;&gt;Hardware Utilized&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 running as an ethernet bridge and music speaker.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lifx.com/pages/lightbulbs&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;LIFX Smart Lightbulb&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32/overview&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;ESP32 Wireless Soc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.radiusnetworks.com/collections/hardware/products/radbeacon-01-dot&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Radbeacon Eddystone Beacon&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B001FWYGJS/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;TP-Link N300 Router&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reflections&#34;&gt;Reflections&lt;/h2&gt;
&lt;p&gt;This project could&amp;rsquo;ve been improved in a couple of ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It was &lt;strong&gt;incredibly&lt;/strong&gt; insecure and very much a &lt;strong&gt;privacy hazard&lt;/strong&gt;. The webserver was never configured to use HTTPS, meaning an attacker could freely spy on a user&amp;rsquo;s network to see which rooms they&amp;rsquo;re in, modify their devices, etc. We literally sent unencrypted measurements of bluetooth RSSI from the ESP32 out through the internet to our webserver.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Despite this, if our novel prototype were a real product I&amp;rsquo;m sure someone would&amp;rsquo;ve bought or funded it though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🤔🤔🤔&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The peripheral control and measurement devices connected to a user&amp;rsquo;s home network using WPS, which is &lt;a href=&#34;https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup#Vulnerabilities&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;not secure&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No cryptography was used to verify that updates to a room&amp;rsquo;s settings came from the Smart Rooms webserver. This means anyone who intercepted and sent the right HTTP replies to the right places could definitely change a user&amp;rsquo;s settings without them asking, even with a home network&amp;rsquo;s NAT firewall enabled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The settings stored on the webserver weren&amp;rsquo;t at risk here, but anyone could reply to the peripheral controlling devices that were polling for the room&amp;rsquo;s settings with made up answers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measurements from the ESP32 could be spoofed by anybody, anywhere, since they weren&amp;rsquo;t authenticated. The ESP32 was simply identified by User-Agent, which anybody can lie about. This also means other users could lie about their ESP32&amp;rsquo;s provided ID to read (but not modify) the settings of other users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to almost nonexistent network security, we didn&amp;rsquo;t really exercise any defensive programming practices for our C firmware running FreeRTOS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our code had plenty of calls to &lt;code&gt;strcpy&lt;/code&gt;, &lt;code&gt;sscanf&lt;/code&gt;, &lt;code&gt;sprintf&lt;/code&gt;, all of which are vulnerable to buffer overflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, security wasn&amp;rsquo;t considered for the project since it was simply a prototype and our biggest priority was just to get something working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On the server side, we handled a fair amount of timestamped RSSI measurements. These measurements are really time-series data, which are well suited to be stored in a time-series database like &lt;a href=&#34;https://www.influxdata.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;InfluxDB&lt;/a&gt;
. This is especially useful when deciding whether measurements indicate a user is in a room. This decision process could consider the average of the last N measurements from a device or use other algorithms. Regardless of the decision algorithm, a time-series database can greatly facilitiate querying timestamped data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We used a relational database for our application, which was the right choice for the rest of our data since it had lots of structure. Homes have rooms, rooms have devices, so on and so on. But the RSSI measurements probably could&amp;rsquo;ve been shoved into InfluxDB. The tradeoff here is added complexity and maintenance though, since two databases is more than one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Us being Computer Engineering and Electrical Engineering students, I think it&amp;rsquo;s reasonable that none of us had ever heard of a time-series database when doing our project (the CS curriculum never talks about them either as far as I know). Knowing this family of databases exists will definitely be helpful in future IoT projects though.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>