<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Blog on Joey Buiteweg</title>
    <link>https://www.josephbuiteweg.com/blog/</link>
    <description>Joey Buiteweg (Programming Blog)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jun 2020 23:28:10 -0400</lastBuildDate>
    
    <atom:link href="https://www.josephbuiteweg.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exercism: A Community-Driven Alternative to Leetcode</title>
      <link>https://www.josephbuiteweg.com/blog/exercism/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/exercism/</guid>
      <description>&lt;h2 id=&#34;whiteboard-questions&#34;&gt;Whiteboard Questions&lt;/h2&gt;
&lt;p&gt;Anyone who has interviewed for a software engineering position has no doubt spent some time practicing &amp;ldquo;whiteboard questions&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Whiteboard questions are normally datastructures and algorithms-oriented programming questions meant to assess technical competency. I personally think such questions fall short in evaluating the effectiveness of an engineer, but they are still prevalent nonetheless.&lt;/p&gt;
&lt;p&gt;Whether or not the interviewing company does these types of technical questions depends on the company. Facebook, Amazon, Apple, Netflix and Google (colloquially known as &amp;ldquo;FAANG&amp;rdquo;) all ask these kinds of questions in their interviews.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Leetcode&lt;/a&gt;
, cringy name and all, is a popular site for practicing such whiteboard questions. You work on example problems and submit them, after which your solution is evaluated for performance and correctness.&lt;/p&gt;
&lt;p&gt;In my opinion, Leetcode falls short from its lack of potential feedback from an actual human being. Interviewers place strong perference on code readability and being able to understand your solution as you make it. &lt;strong&gt;Leetcode absolutely does not ensure either of these!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;exercism&#34;&gt;Exercism&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href=&#34;https://exercism.io/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Exercism&lt;/a&gt;
, a great alternative or supplement to Leetcode for programming practice.&lt;/p&gt;
&lt;p&gt;Exercism is entirely free, unlike Leetcode which requires purchasing a premium tier to access all problems, and provides the option to be mentored on improving your solutions. &lt;a href=&#34;https://exercism.io/become-a-mentor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Mentoring&lt;/a&gt;
 and receiving general input from others on your public solutions is a fantastic way to improve yourself as a teammate and engineer!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not comfortable with this aspect of Exercism, mentoring and making your solutions public is entirely optional.&lt;/p&gt;
&lt;p&gt;Not only is Exercism a great tool for interview practice, it&amp;rsquo;s excellent for learning a new programming language as well. I&amp;rsquo;ve read and heard many &lt;a href=&#34;https://hackernoon.com/elm-in-production-developer-reflections-after-34k-lines-of-code-ok9h3v95&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;success stories&lt;/a&gt;
 from engineers using Exercism to become fluent in a new programming language.&lt;/p&gt;
&lt;h2 id=&#34;my-experience&#34;&gt;My Experience&lt;/h2&gt;
&lt;p&gt;I recently attended a Go Developer Network event and watched &lt;a href=&#34;https://www.youtube.com/watch?v=-eWTdp58uiY&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt;
, which is both a great example success story and how I learned about Exercism in the first place!&lt;/p&gt;
&lt;p&gt;After this talk, I started using Exercism and have loved it thus far. I especially like its command-line interface (CLI), and how everything is run on your machine, as opposed to some annoying and slow web-interface like Leetcode&amp;rsquo;s development environment. The free tier of Leetcode takes longer to compile, run and submit solutions, which is very unappealing!&lt;/p&gt;
&lt;p&gt;Here is &lt;a href=&#34;https://exercism.io/profiles/joebb97&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;my exercism profile&lt;/a&gt;
 as well as &lt;a href=&#34;https://github.com/joebb97/exercism-solutions&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;my repository&lt;/a&gt;
 with my solutions to various problems on the site.&lt;/p&gt;
&lt;p&gt;I hope you&amp;rsquo;ll join the community and make use of this wonderful resource!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Small Concurrency Example in Various Languages</title>
      <link>https://www.josephbuiteweg.com/blog/ping-pong-concurrency/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/ping-pong-concurrency/</guid>
      <description>&lt;h2 id=&#34;the-premise&#34;&gt;The Premise&lt;/h2&gt;
&lt;p&gt;A common introduction to concurrency is the simple task of spawning two threads, then printing &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;pong&amp;rdquo; in order N (N = 5 in the following examples) times.&lt;/p&gt;
&lt;p&gt;This task is a light intoduction to synchronization primitives like mutexes and condition variables, or in more modern-concurrency models, channels / thread-safe queues.&lt;/p&gt;
&lt;p&gt;I figured it&amp;rsquo;d be interesting to see what this task looks like in different programming languages, so I decided to code it in my four favorite programming languages (python, rust, golang, c++, in that order) to get a sense of their concurrency libraries.&lt;/p&gt;
&lt;p&gt;My methodology was to only use native concurrency primitives supported by the languages. Additionally, if a language supported message-passing concurrency via channels as well as traditional Hoare monitors, I wrote an implementation with both models.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now take a look at the examples. The source code is available in my &lt;a href=&#34;https://github.com/joebb97/sandbox&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;sandbox monorepo&lt;/a&gt;
(just run &lt;code&gt;$ find . -name ping_pong -type d&lt;/code&gt; to locate the specific directories).&lt;/p&gt;
&lt;h2 id=&#34;golang&#34;&gt;Golang&lt;/h2&gt;
&lt;p&gt;One of Go&amp;rsquo;s best features is its beautiful and simple message-passing concurrency via channels. The message-passing code looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// main.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;mainChannels&lt;/span&gt;() {
	numTimes &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; wg sync.WaitGroup
	theChannel &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;)

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Ping thread
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;theChannel)
			theChannel &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
		}
	}(numTimes)

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Pong thread
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; {
			theChannel &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
			fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;theChannel)
		}
	}(numTimes)

	wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;()
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;mainMutex&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We use a &lt;code&gt;sync.waitGroup&lt;/code&gt; as an elegant way to wait for both of the goroutines to finish executing, since goroutines don&amp;rsquo;t have the traditional &lt;code&gt;.join()&lt;/code&gt; facility available. I find this solution easier to read than using a separate &amp;ldquo;done&amp;rdquo; channel to coordinate termination of the main thread.&lt;/p&gt;
&lt;p&gt;Golang&amp;rsquo;s unbuffered channels, &lt;code&gt;theChannel&lt;/code&gt; in this example, are perfect for this situation since both producers and consumers block until a value is put into or removed from the channel, respectively. This is why the for-loops on lines 17 and 27 don&amp;rsquo;t immediately keep executing.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;theChannel&lt;/code&gt; was buffered with a size of one, the call to put a value into the channel wouldn&amp;rsquo;t block on lines 20 and 28. This would cause the ping thread to potentially print &amp;ldquo;pong&amp;rdquo;, which isn&amp;rsquo;t what we want!&lt;/p&gt;
&lt;p&gt;Running the example we see the desired output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go run main.go
ping
pong
ping
pong
ping
pong
ping
pong
ping
pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Golang also supports the traditional monitor-style synchronization primitives of mutexes and condition variables. Here&amp;rsquo;s what the ping-pong problem looks like using that style of concurrency.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// main.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;mainMutex&lt;/span&gt;() {
	numTimes &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; wg sync.WaitGroup
	m &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sync.Mutex{}
	cv, printStr &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sync.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewCond&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;m), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Ping thread
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; {
			cv.L.&lt;span style=&#34;color:#50fa7b&#34;&gt;Lock&lt;/span&gt;()
			&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; printStr &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt; {
				cv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;()
			}
			fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(printStr)
			printStr = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
			cv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Signal&lt;/span&gt;()
			cv.L.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unlock&lt;/span&gt;()
		}
	}(numTimes)

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Pong thread
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; {
			cv.L.&lt;span style=&#34;color:#50fa7b&#34;&gt;Lock&lt;/span&gt;()
			&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; printStr &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt; {
				cv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;()
			}
			fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(printStr)
			printStr = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
			cv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Signal&lt;/span&gt;()
			cv.L.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unlock&lt;/span&gt;()
		}
	}(numTimes)

	wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;()
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;mainMutex&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Each thread waits its turn to print its designated &lt;code&gt;printStr&lt;/code&gt;. They wait until the other thread signals that it&amp;rsquo;s done with its turn by changing the &lt;code&gt;printStr&lt;/code&gt; and by calling &lt;code&gt;cv.Signal()&lt;/code&gt;. It&amp;rsquo;s probably more correct to swap line 36 with 35 and line 20 with 19, but both orders work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember to always wrap your calls to &lt;code&gt;cv.Wait()&lt;/code&gt; in a loop to handle spurious wakeups!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Personally, I feel this style is less intuitive, but it&amp;rsquo;s good to know it&amp;rsquo;s still supported.&lt;/p&gt;
&lt;p&gt;Running this example gives the same result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go run main.go
ping
pong
ping
pong
ping
pong
ping
pong
ping
pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s take a look at the python implementation.&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;Python3 has a thread-safe queue &lt;a href=&#34;https://docs.python.org/3/library/queue.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;implementation&lt;/a&gt;
, so we&amp;rsquo;ll first look at an example that uses that. Python&amp;rsquo;s queue differs slightly from an unbuffered Golang channel because producers do not block when enqueueing items, even if the queue has a max size of one (the default). This makes the default queue more like a buffered channel of size one in Golang.&lt;/p&gt;
&lt;p&gt;This caveat forces us to use two separate queues so that one thread doesn&amp;rsquo;t just print over and over, as was the case in the scenario we talked about with a buffered channel of size one in Golang.&lt;/p&gt;
&lt;p&gt;Here is the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ping_pong.py&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; queue
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; threading


&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ping&lt;/span&gt;(ping_queue, pong_queue, num_times):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num_times):
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(ping_queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get())
        pong_queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;put(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;pong&lt;/span&gt;(ping_queue, pong_queue, num_times):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num_times):
        ping_queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;put(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(pong_queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get())


&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    ping_queue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Queue()
    pong_queue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Queue()
    num_times &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
    threads &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [threading&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;ping, args&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(ping_queue, pong_queue, num_times)),
               threading&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;pong, args&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(ping_queue, pong_queue, num_times))]
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; thread &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; threads:
        thread&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;start()

    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; thread &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; threads:
        thread&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;join()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By deafult, calls to &lt;code&gt;queue.get&lt;/code&gt; will block until a value is availble, which is why lines 8 and 15 won&amp;rsquo;t print until a value is enqueued.&lt;/p&gt;
&lt;p&gt;This code produces the desired output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 ping_pong.py
ping
pong
ping
pong
ping
pong
ping
pong
ping
pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python also supports monitor-style concurrency, but I figured it&amp;rsquo;d be more interesting to take a look at examples that use &lt;code&gt;asyncio&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;For a fantastic overview of the different concurrency options available in Python, as well as when to use each, check out &lt;a href=&#34;https://realpython.com/python-concurrency/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;
 from Real Python. Krondo&amp;rsquo;s &lt;a href=&#34;http://krondo.com/in-which-we-begin-at-the-beginning/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt;
 on the different paradigms is also worth a read.&lt;/p&gt;
&lt;p&gt;This problem isn&amp;rsquo;t the most appropriate place to use &lt;code&gt;asyncio&lt;/code&gt;, but life is short and can always use more asynchronous programming.&lt;/p&gt;
&lt;p&gt;Here is the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ping_pong_aio.py&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asyncio

&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ping&lt;/span&gt;(ping_event, pong_event, num_times):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num_times):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; ping_event&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;wait()
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;)
        ping_event&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;clear()
        pong_event&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;set()

&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;pong&lt;/span&gt;(ping_event, pong_event, num_times):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num_times):
        ping_event&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;set()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; pong_event&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;wait()
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;)
        pong_event&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;clear()

&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;():
    ping_event, pong_event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Event(), asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Event()
    num_times &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
    ping_task &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;create_task(
        ping(ping_event, pong_event, num_times)
    )
    pong_task &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;create_task(
        pong(ping_event, pong_event, num_times)
    )
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; ping_task
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; pong_task


&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(main())
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Here we use an &lt;code&gt;asyncio.Event&lt;/code&gt; to have one task communicate to another (and to the event loop) that it is done with its turn. We use two different events to avoid confusion and prevent a task from signalling to itself that it&amp;rsquo;s done, which wouldn&amp;rsquo;t be very useful.&lt;/p&gt;
&lt;p&gt;The ordering of the lines within the for-loops are to ensure that &amp;ldquo;ping&amp;rdquo; is printed first, just like in the other examples.&lt;/p&gt;
&lt;p&gt;This example could modify a &lt;code&gt;print_str&lt;/code&gt; variable where &lt;code&gt;print()&lt;/code&gt; is called on lines 7 and 15, like in previous examples, but this approach works too so I figured I&amp;rsquo;d show it.&lt;/p&gt;
&lt;p&gt;This code differs from the other examples thus far because it only runs in one thread! The lack of context switching is one of the main performance benefits of asynchronous models over purely threaded ones.&lt;/p&gt;
&lt;p&gt;We see the same desired results from this code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 ping_pong_aio.py
ping
pong
ping
pong
ping
pong
ping
pong
ping
pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;asyncio&lt;/code&gt; also has support for mutexes and condition variables (which combines the functionality of an &lt;a href=&#34;https://docs.python.org/3/library/asyncio-sync.html#asyncio.Condition&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Event and a Lock&lt;/a&gt;
) for synchronization between tasks . I don&amp;rsquo;t think these are used much in normal asynchronous programming, but we might as well see them in action.&lt;/p&gt;
&lt;p&gt;Here is the &lt;code&gt;asyncio&lt;/code&gt; code which uses &lt;code&gt;asyncio.Condition&lt;/code&gt; instead of &lt;code&gt;asyncio.Event&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ping_pong_aio.py&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asyncio

print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ping_cond&lt;/span&gt;(cond, num_times):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt; print_str
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num_times):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; cond:
            &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; cond&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;wait()
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(print_str)
            print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
            cond&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;notify()

&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;pong_cond&lt;/span&gt;(cond, num_times):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt; print_str
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num_times):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; cond:
            &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; cond&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;wait()
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(print_str)
            print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
            cond&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;notify()

&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main_cond&lt;/span&gt;():
    num_times &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
    cond &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Condition()
    ping_task &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;create_task(ping_cond(cond, num_times))
    pong_task &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;create_task(pong_cond(cond, num_times))
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; ping_task
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; pong_task

&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(main_cond())
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The calls to &lt;code&gt;async with cond&lt;/code&gt;, like on line 8, simply acquire the underlying mutex. Golang and Python&amp;rsquo;s approach to have the condition variable be automatically associated with an underlying mutex is quite convenient, since this is regarded as best practices anyway.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cond.notify()&lt;/code&gt; simply alerts the other task that the &lt;code&gt;print_str&lt;/code&gt; has been changed and that the current task&amp;rsquo;s turn is over.&lt;/p&gt;
&lt;p&gt;Once again we see the desired output from running this code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 ping_pong_aio.py
ping
pong
ping
pong
ping
pong
ping
pong
ping
pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s take a look some examples in Rust.&lt;/p&gt;
&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;
&lt;p&gt;Rust also has native support for thread-safe queues for message-passing concurrency, which it also calls a channel, just like Golang. Unfortunately Rust&amp;rsquo;s channels are only multiple-producer, &lt;strong&gt;single-consumer&lt;/strong&gt; (abbreviated &amp;ldquo;mpsc&amp;rdquo;) channels, which is somewhat limiting. It enforces only one consumer using Rust&amp;rsquo;s innovative ownership semantics.&lt;/p&gt;
&lt;p&gt;This differs from Golang&amp;rsquo;s channels and Python&amp;rsquo;s thread-safe queue, which are both multiple-producer, &lt;strong&gt;multiple-consumer&lt;/strong&gt; (abbreviated &amp;ldquo;mpmc&amp;rdquo;) channels/queues.&lt;/p&gt;
&lt;p&gt;These concurrency primitives are much more flexible than Rust&amp;rsquo;s, since many threads can take values out of the channel. It seems there are no plans to have a natively supported mpmc channel in Rust, at least based on this &lt;a href=&#34;https://github.com/rust-lang/rfcs/issues/848&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;GitHub issue&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;To work around these limitations, we use two channels for each thread to send messages to the other. Here is the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// src/main.rs
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::sync::mpsc::{Sender, Receiver};
&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::sync::mpsc;
&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::sync::{Arc, Mutex, Condvar};
&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::thread;

&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main_channels&lt;/span&gt;() {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; (ping_tx, ping_rx): (Sender&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;, Receiver&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; mpsc::channel();
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; (pong_tx, pong_rx): (Sender&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;, Receiver&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; mpsc::channel();
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; num_times &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;

    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; ping_thread &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; thread::spawn(&lt;span style=&#34;color:#ff79c6&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;..num_times {
            println&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;{:?}&amp;#34;&lt;/span&gt;, ping_rx.recv().unwrap());
            pong_tx.send(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;).unwrap();
        }
    });
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; pong_thread &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; thread::spawn(&lt;span style=&#34;color:#ff79c6&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;..num_times {
            ping_tx.send(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;).unwrap();
            println&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;{:?}&amp;#34;&lt;/span&gt;, pong_rx.recv().unwrap());
        }
    });
    ping_thread.join().unwrap();
    pong_thread.join().unwrap();

}

&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
    main_channels();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As with most other primitives, the &lt;code&gt;_rx&lt;/code&gt; ends of the channels block until a value can be removed, which causes the for-loops to wait until the other thread has had its turn.&lt;/p&gt;
&lt;p&gt;I do like Rust&amp;rsquo;s optional interface of passing a closure / lambda for a thread to run. It&amp;rsquo;s always nice to save a few lines of code where possible (Golang and Python support this too).&lt;/p&gt;
&lt;p&gt;This code also produces the desired result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cargo run
   Compiling ping_pong v0.1.0 &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;/Users/Joey/Dev/sandbox/rust/ping_pong&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    Finished dev &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; target&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in 0.92s
     Running &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;target/debug/ping_pong&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As with the other languages we&amp;rsquo;ve examined thus far, Rust also supports monitor-style concurrency. Rust&amp;rsquo;s ownership model makes acquiring and releasing a mutex pretty fool-proof, mainly because there&amp;rsquo;s no &lt;code&gt;unlock&lt;/code&gt; function! Here is the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// src/main.rs
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::sync::mpsc::{Sender, Receiver};
&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::sync::mpsc;
&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::sync::{Arc, Mutex, Condvar};
&lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; std::thread;

&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main_mutex&lt;/span&gt;() {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; num_times &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
    &lt;span style=&#34;color:#6272a4&#34;&gt;// let pair = Arc::new((Mutex::new(Some(&amp;#34;ping&amp;#34;)), Condvar::new()));
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; pair &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Arc::new((Mutex::new(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;), Condvar::new()));
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; pair2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Arc::clone(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;pair);
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; ping_thread &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; thread::spawn(&lt;span style=&#34;color:#ff79c6&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;..num_times {
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;ref&lt;/span&gt; lock, &lt;span style=&#34;color:#ff79c6&#34;&gt;ref&lt;/span&gt; cv) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;*&lt;/span&gt;pair2;
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;mut&lt;/span&gt; print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; lock.lock().unwrap();
            &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt; {
                print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cv.wait(print_str).unwrap();

            }
            println&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;{:?}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;print_str);
            &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;;
            cv.notify_one();
        }
    });
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; pong_thread &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; thread::spawn(&lt;span style=&#34;color:#ff79c6&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;..num_times {
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;ref&lt;/span&gt; lock, &lt;span style=&#34;color:#ff79c6&#34;&gt;ref&lt;/span&gt; cv) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;*&lt;/span&gt;Arc::clone(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;pair);
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;mut&lt;/span&gt; print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; lock.lock().unwrap();
            &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt; {
                print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cv.wait(print_str).unwrap();

            }
            println&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;{:?}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;print_str);
            &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;;
            cv.notify_one();
        }
    });
    ping_thread.join().unwrap();
    pong_thread.join().unwrap();
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
    main_mutex();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This interface is really clunky to me, and certainly isn&amp;rsquo;t intuitive to read! It&amp;rsquo;s also way more lines the previous example which is not great. Clunky or not, it still produces the same result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cargo run
   Compiling ping_pong v0.1.0 &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;/Users/Joey/Dev/sandbox/rust/ping_pong&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    Finished dev &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; target&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in 0.92s
     Running &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;target/debug/ping_pong&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take a look at how another systems language, C++, handles the task.&lt;/p&gt;
&lt;h2 id=&#34;c&#34;&gt;C++&lt;/h2&gt;
&lt;p&gt;Unfortunately C++ doesn&amp;rsquo;t have a native channel or thread-safe queue implementation. This means our only option provided by the STL is monitor-style concurrency.&lt;/p&gt;
&lt;p&gt;Here is the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Builds to executable ping_pong using CMake and Ninja, see source.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;condition_variable&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;
std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;mutex mut;
std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;condition_variable cv;
std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;string print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ping&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; n) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; lk(mut);
        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;) {
            cv.wait(lk);
        }
        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;;
        print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;;
        lk.unlock();
        cv.notify_one();
    }
}

&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;pong&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; n) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; lk(mut);
        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;) {
            cv.wait(lk);
        }
        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;;
        print_str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;;
        lk.unlock();
        cv.notify_one();
    }
}

&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;thread&lt;/span&gt; ping_thread(ping, n);
    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;thread&lt;/span&gt; pong_thread(pong, n);
    ping_thread.join();
    pong_thread.join();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Unsurprisingly, this code yields the same desired result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./ping_pong
ping
pong
ping
pong
ping
pong
ping
pong
ping
pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We examined a simple concurrency example in four languages, each looking fairly similar to the other. I found this to be useful exercise. It&amp;rsquo;s not always the case that similar ideas yield similar code across languages, but this is definitely the case here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Curated List of Project Considerations</title>
      <link>https://www.josephbuiteweg.com/blog/project-considerations/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/project-considerations/</guid>
      <description>&lt;h1 id=&#34;project-considerations&#34;&gt;Project considerations&lt;/h1&gt;
&lt;p&gt;Above all else, it has to work.&lt;/p&gt;
&lt;p&gt;System design hints.  Elegant and simple design.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;a href=&#34;https://en.wikipedia.org/wiki/Occam%27s_razor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;
 (&lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;stupid&lt;/a&gt;
), don’t be Richard Hendricks from Silicon Valley trying to explain electrons to a user. Sometimes the strawman or brute force solution is good enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fail faster, build one design to throw it away, you arent going to get it right the first time. Google spends years getting things wrong too (it took them ~seven years to make &lt;a href=&#34;https://www.youtube.com/watch?v=nvlt0dA7rsQ&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Google Spanner&lt;/a&gt;
).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid the &lt;a href=&#34;https://en.wikipedia.org/wiki/Anti-pattern#Software_engineering&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;anti-patterns&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Narrow the waistband when many components connect to all other components. Create a common ground (e.g LLVM, Kafka, &lt;a href=&#34;https://en.wikipedia.org/wiki/Language_Server_Protocol&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;LSP&lt;/a&gt;
, FIRRTL).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Choose &lt;a href=&#34;http://boringtechnology.club/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;boring technology&lt;/a&gt;
 and choose fewer and simpler technologies with better known failure models&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Research what the right tools (and protocols) are for the job.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Research what&amp;rsquo;s been done and what solutions have been made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Study what has worked and what hasn&amp;rsquo;t worked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DON&amp;rsquo;T REINVENT THE &lt;a href=&#34;https://en.wikipedia.org/wiki/Reinventing_the_wheel#Related_phrases&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;SQUARE WHEEL&lt;/a&gt;
. Avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Not_invented_here&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;NIH&lt;/a&gt;
 syndrome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DON&amp;rsquo;T be an &lt;a href=&#34;https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;architecture astronaut&lt;/a&gt;
, pick the proper technology to solve a problem, don&amp;rsquo;t make up a problem just to use some technology.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code style, quality and readability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write good specifications and documentation (both for internal and external usage).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write good comments that describe WHY, not WHAT, you&amp;rsquo;re doing. Imagine the person knows where you live that has to read it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use style guides and linters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good abstractions and separation of implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maintainability and Serviceability. How easy is it to ship new features? What bogs you down?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scalability.&lt;/p&gt;
&lt;p&gt;Advocate for Devs and Customers, not one or the other. Helping improve one leads to helping the other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explanation in &lt;a href=&#34;https://www.youtube.com/watch?v=i69U0lvi89c&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UI/UX are very important, which i18n is a part of.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o9pEzgHorH0&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Ship features&lt;/a&gt;
, not code.&lt;/p&gt;
&lt;p&gt;Exercise &lt;a href=&#34;https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;good programming taste&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Good, quality automated tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write tests while developing (TDD).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;a href=&#34;https://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;DAMP&lt;/a&gt;
 (descriptive and meaningful phrases).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI/CD.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spend time automating what is worth automating, not something you&amp;rsquo;ll do once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instrumentation, logging, and monitoring are all crucial. Insight into what your system is doing is key. Don’t fly blind.&lt;/p&gt;
&lt;p&gt;Easy, testable, reproducible, quick builds. Quick builds are essential for short iteration cycles.&lt;/p&gt;
&lt;p&gt;Choose &lt;a href=&#34;https://microservices.io/patterns/microservices.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;micro services&lt;/a&gt;
 (&lt;a href=&#34;https://pythonspeed.com/articles/dont-need-kubernetes/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;if you need it&lt;/a&gt;
) and reasonable number of smaller implementations as opposed to one &lt;a href=&#34;https://microservices.io/patterns/monolithic.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;monolith&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Performance.&lt;/p&gt;
&lt;p&gt;Correctness.&lt;/p&gt;
&lt;p&gt;Fault-Tolerance and error handling, do the &lt;a href=&#34;https://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;end-to-end principle&lt;/a&gt;
 where appropriate.&lt;/p&gt;
&lt;p&gt;Software development methods (choose &lt;a href=&#34;https://www.atlassian.com/agile/manifesto&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;agile&lt;/a&gt;
)&lt;/p&gt;
&lt;p&gt;Keeping track of bugs in a database.&lt;/p&gt;
&lt;p&gt;SECURITY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It’s a &lt;a href=&#34;https://www.sentinelone.com/blog/having-trouble-getting-senior-management-to-buy-in-to-your-security-recommendations-try-these-essential-tips/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;mindset&lt;/a&gt;
 not a feature. It’s not a destination that is ever reached unfortunately, it’s a journey that always has to be followed. Adopt the &lt;a href=&#34;https://www.coursera.org/lecture/digital-democracy/the-security-mindset-sLtQu&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;security mindset&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rational paranoia vs analysis paralysis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have to be &lt;a href=&#34;https://www.acm.org/code-of-ethics&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;ethical&lt;/a&gt;
, professional, and excellent.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acknowledge the &lt;a href=&#34;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Dunning-Kruger effect&lt;/a&gt;
, &lt;a href=&#34;https://en.wikipedia.org/wiki/Four_stages_of_competence&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;four stages of competence&lt;/a&gt;
, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Paul_Graham_%28programmer%29#Blub&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Blub programmers&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Database for your equipment.&lt;/p&gt;
&lt;p&gt;Licensing (gpl, mit, bsd, Creative Commons).&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://www.youtube.com/watch?v=30jNsCVLpAE&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Bryan Cantrill&lt;/a&gt;
, we should have a Bias towards observation, not rash actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To debug, ask questions, &lt;strong&gt;then&lt;/strong&gt; form a hypothesis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any of Joel Sposky&amp;rsquo;s &lt;a href=&#34;https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;various&lt;/a&gt;
 &lt;a href=&#34;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;tips&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Consolidated List of Bad Computer Security Things</title>
      <link>https://www.josephbuiteweg.com/blog/security-bad-things-list/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/security-bad-things-list/</guid>
      <description>&lt;p&gt;Things that are bad, dumb, or broken (security checklist), in a few categories.
If you see one of these acronyms or ideas somewhere in your code or product then that&amp;rsquo;s no good.&lt;/p&gt;
&lt;h2 id=&#34;in-cryptography&#34;&gt;In Cryptography&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MD5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SHA1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac then Encrypt (should be Encrypt then Mac), or really should just be GCM / AEAD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AES-*-EBC, AES-*-CBC or anything that isn&amp;rsquo;t GCM or AEAD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Snake oil crypto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Padding oracles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Adaptive_chosen-ciphertext_attack#Practical_attacks&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Bleinchenbacher attack&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reusing symmetric keys (block or stream ciphers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DES, RC4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hashing is not encryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hashing without a shared secret for MAC (length extension attacks)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PGP ecosystem and the web of trust&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Based on &lt;a href=&#34;https://latacora.micro.blog/2019/07/16/the-pgp-problem.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;opinions&lt;/a&gt;
 from
&lt;a href=&#34;https://blog.filippo.io/giving-up-on-long-term-pgp/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;people&lt;/a&gt;
 much &lt;a href=&#34;https://blog.cryptographyengineering.com/2014/08/13/whats-matter-with-pgp/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;smarter&lt;/a&gt;
 than me&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy#Weak_security&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;WEP&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-tls&#34;&gt;In TLS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHE_EXPORT and other export grade crypto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DH-512, RSA-512 or anything lower than 3072 bit asymmetric keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things that aren&amp;rsquo;t ECDHE w/Ed25519&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reusing primes for DH key exchange&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using weak primes for DH key exchange&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NIST CURVES from the NSA or curves that aren&amp;rsquo;t Ed25519&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad entropy sources for generating primes and keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSL (not TLS)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dumb Certificate Authorities (Equifax, Verisign) that get breached&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet replay attacks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-the-web&#34;&gt;In the Web&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plain HTTP (no encryption)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code-injection attacks (SQL injection, XSS, buffer overflows and exploits)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote code execution (RCE) attacks (malformed packets, and co.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session / cookie stealing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSRF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other things on the &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;OWASP Top 10&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plaintext passwords and passwords that aren&amp;rsquo;t hashed using a slow cryptographic hash (bcrypt) &amp;gt; 512 bits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reused passwords&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weak password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default passwords&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-sidechannels&#34;&gt;In sidechannels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;clflush + rdtsc for all privilege levels on x86 and x86-64&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branching on secret and sensitive data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speculating past faults (&lt;a href=&#34;https://meltdownattack.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;meltdown&lt;/a&gt;
)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speculating past bounds and security checks (&lt;a href=&#34;https://meltdownattack.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;spectre&lt;/a&gt;
)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unrestricted access to microarchitecture (cache, TLB, store buffers, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Side channels in general (especially the cache sidechannel)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-general&#34;&gt;In general&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Security by obscurity&amp;rdquo; relying on secrets in your code that people won’t find&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assuming your code is private and storing secrets in your code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IoT security and non-existent cryptography&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blind trust of sensor data without accounting for noise contributed by an attacker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad endpoint and user security practices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code that is susceptible to reverse-engineering, i.e no obfuscation is employed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assuming the user doesn’t want to ruin your life, either intentionally or unintentionally&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-programs-cc-ones-mostly&#34;&gt;In programs (C/C++ ones, mostly)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Buffer overread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Buffer overflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer overflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not sanitizing user inputs and queries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strcpy, sprintf, gets, getpw, scanf and fscanf on strings without length checks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User-inputted format strings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C being dumb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control flow integrity compromises&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to libc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gadgets of all kind&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-contrast-the-things-we-need&#34;&gt;In contrast, the things we need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Secure keys and key distribution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS, mTLS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certs and automated cert management and renewal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confidentiality, Authenticity, Non-Repudiation, Integrity, and Privacy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Curious Case of Dividing Numbers in Python</title>
      <link>https://www.josephbuiteweg.com/blog/python-divison/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/python-divison/</guid>
      <description>&lt;h2 id=&#34;positive-numbers&#34;&gt;Positive Numbers&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re in the market for converting from python2 to python3, be aware that there&amp;rsquo;s some fundamental differences in default division of integers. Also beware that these differences won&amp;rsquo;t be automagically resolved by the tool &lt;a href=&#34;https://docs.python.org/3/library/2to3.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;2to3&lt;/a&gt;
.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#bd93f9&#34;&gt;1.6666666666666667&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the &lt;code&gt;/&lt;/code&gt; operator in python3 leads to floating point divison by default, which can lead to problems if you&amp;rsquo;re doing something like calculating memory page indices!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;index &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;PAGE_SIZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access the integer division behavior in python3, you&amp;rsquo;ll need to use the &lt;code&gt;//&lt;/code&gt; operator. The code above becomes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;index &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;PAGE_SIZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;negative-numbers&#34;&gt;Negative Numbers&lt;/h2&gt;
&lt;p&gt;Things get even more interesting when dealing with negative numbers and rounding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1.6666666666666667&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From what I can tell, both python2 and python3 round towards negative infinity when doing integer division (&lt;code&gt;/&lt;/code&gt; in python2 with integer divider and dividend, &lt;code&gt;//&lt;/code&gt; in python3 with integer divider and dividend). They also do the same thing when converting a negative floating point number to an integer, which is to round towards zero.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;compared-to-c&#34;&gt;Compared to C++&lt;/h2&gt;
&lt;p&gt;Integer division truncation with negative numbers is different in C++, unfortunately.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;$ python
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;2.7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; (default, Jan &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#bd93f9&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; Compatible Apple LLVM &lt;span style=&#34;color:#bd93f9&#34;&gt;10.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1001.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;37.14&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;$ python3
Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#bd93f9&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;)
[Clang &lt;span style=&#34;color:#bd93f9&#34;&gt;11.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; (clang&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1100.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;33.17&lt;/span&gt;)] on darwin
Type &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// a.cpp
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;(){
    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;endl;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ g++ a.cpp ; ./a.out
-1
-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thankfully the behavior for converting a negative floating point number to an &lt;code&gt;int&lt;/code&gt; has the same behavior between the three languages (as shown by the output of &lt;code&gt;int(5.0 / -3)&lt;/code&gt; in C++).&lt;/p&gt;
&lt;p&gt;Subtle differences in basic behavior of programming languages are always a joy to stumble across at the most inopportune times.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Butler Lampson&#39;s System Design Hints</title>
      <link>https://www.josephbuiteweg.com/blog/design-hints/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.josephbuiteweg.com/blog/design-hints/</guid>
      <description>&lt;p&gt;A summary of &lt;a href=&#34;https://en.wikipedia.org/wiki/Butler_Lampson&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Butler Lampson&lt;/a&gt;
&amp;rsquo;s original &lt;a href=&#34;https://bwlampson.site/33-Hints/Acrobat.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;
&lt;/p&gt;
&lt;h1 id=&#34;2-functionality&#34;&gt;2 Functionality&lt;/h1&gt;
&lt;h2 id=&#34;21-keep-it-simple&#34;&gt;2.1: Keep it simple&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do one thing at a time, do it well. Make small, working, effective interfaces, they are contracts, don&amp;rsquo;t try to do too much, don’t generalize.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get it right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write specifications (then implement), document the abstract functionality provided by your application and its interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-corollaries&#34;&gt;2.2: Corollaries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make it fast rather than general or powerful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t hide the power of the interface, clients should know what it does well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes provide flexibility (allow the client to provide what they want to make it both general and powerful).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave it to the client as long as it is cheap to pass control back and forth.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-continuity&#34;&gt;2.3: Continuity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep basic interfaces stable, they are contracts. Legacy is sometimes unavoidable, but you can spoof it when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have to change interfaces, keep a place to stand, make sure stuff built on your old interface can still benefit from the new changes or even just work at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes need to put old interface on top of a new system (easier than rewriting the whole thing, this is where VMs come in handy).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24-making-implementations-work&#34;&gt;2.4: Making implementations work&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plan to throw one away. Fail faster, you’re almost never going to get it right the first time (doesn’t mean you shouldn’t try).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep secrets of the implementation (but don’t hide power), don’t allow clients to assume things they shouldn’t. The fewer assumptions the better when needing to port things, hard to design/re-design interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes can benefit from adding more assumptions, but a balance is needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Divide and conquer functionality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce a hard problem into several smaller ones.&lt;/li&gt;
&lt;li&gt;Solve those smaller problems with effective interfaces and abstractions.&lt;/li&gt;
&lt;li&gt;Divide resources or limit them depending on what gives better output.&lt;/li&gt;
&lt;li&gt;Defer and avoid work or just substitute work for other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a good idea again instead of generalizing. Sometimes the specific implementation is better than trying to make that implementation work everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-handling-all-the-cases&#34;&gt;2.5: Handling all the cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Handle the normal and worst cases separately, the requirements are very different.
&lt;ul&gt;
&lt;li&gt;Optimizing the tail is different from optimizing normal execution.&lt;/li&gt;
&lt;li&gt;The normal case must be fast, the worst case must make some progress.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-speed&#34;&gt;3 Speed&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Split resources in a fixed way if in doubt, rather than sharing them. Allocator can be predictable, use registers instead of memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use static analysis if you can, don’t delude with bad one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic translation (Do expensive translation to faster context once, benefit overall).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache answers to expensive computations rather than doing them over. Don’t want to thrash though, need to be able to fit all active values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use hints to speed up normal execution. Hints can be wrong and might not result from an associated lookup. Need to be able to check its correctness. Check it against truth, supposed to make things run fast (must be correct nearly all the time). Routing sometimes uses this (BGP does)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When in doubt, use brute force, straightforward easily analyzed solution w/ special purpose computing is better than complex, poorly characterized one that only works well if some assumptions are satisfied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asymptotically faster algorithm is not necessarily better. Sometimes the dumb brute force thing just works better and is easier to deal with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute in the background when possible (defer work or do it when nobody is looking). Use the time allotted to you (consolidate things overnight).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use batch processing. Do jobs in groups, normally the cost of starting each job individually plus doing the job outweighs the cost of doing them all at once. (Bank does all their computation jobs at once overnight).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Safety first, avoid disaster when allocating resources, don’t try to always be optimal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overloading a system can drastically degrade its service. Leave head room for things if you can, don’t cause thrashing.&lt;/li&gt;
&lt;li&gt;Cleverness only really works if you know the load. CPU scheduling example, be lazy and safe some times&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shed load to control demand, rather than allowing the system to become overloaded.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Like how mac’s intentionally run a process that does empty CPU operations to cool it down.&lt;/li&gt;
&lt;li&gt;Drop packets as a router if it’s flooded, memory manager limits jobs.&lt;/li&gt;
&lt;li&gt;Worst case the system crashes and can start over with less load.&lt;/li&gt;
&lt;li&gt;Arpanet tried to always deliver a packet, but this lead to deadlocks a lot if a link goes down.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-fault-tolerance&#34;&gt;4 Fault-tolerance&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;End-to-end, Error recovery at application level is required for reliable system. HANDLE YOUR EXCEPTIONS CORRECTLY! Idempotency matters here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check the end-to-end errors, add intermediate checks if errors are super frequent.&lt;/li&gt;
&lt;li&gt;Routers again drop packets if something went wrong or notify the sender.&lt;/li&gt;
&lt;li&gt;Need cheap test for success, also might not see issues until heavy load&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log updates to record the truth about the state of an object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log based file system is an example. Similar to record and replay debugging.&lt;/li&gt;
&lt;li&gt;HAS TO BE IDEMPOTENT THOUGH in case you end up applying the same operation twice.&lt;/li&gt;
&lt;li&gt;Store versions of an object and make those versions immutable (like in Clojure and other functional programming languages).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make actions atomic or restartable (transactions that complete or do nothing).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commit records in databases, an operation should either happen in its entirety or not at all.&lt;/li&gt;
&lt;li&gt;Again need a restartable operation (idempotent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replicate state across nodes (distributed systems).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>